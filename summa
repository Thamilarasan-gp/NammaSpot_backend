const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const Map = require('./modules/Map'); 
const details = require('./modules/Details');// Adjusted import
const Employee = require('./modules/employee')

const app = express();

app.use(express.json());
app.use(cors());

mongoose.connect('mongodb://127.0.0.1:27017/Admindata', { useNewUrlParser: true, useUnifiedTopology: true });

app.post('/maps', (req,res) => {
    const location = req.body.location; // Get single location from request body
    Map.findOneAndUpdate(
        {}, // Find the first document (or you can specify a specific query)
        { $push: { locations: location } }, // Append the location to the locations array
        { new: true, upsert: true } // Create the document if it doesn't exist
    )
    .then(result => res.json(result))
    .catch(err => res.json(err));
});

app.get('/get', (req, res) => {
    Map.findById('664827a4b50ea396d0c856fd')
        .then(result => res.json(result.locations))
        .catch(err => res.json(err));
});


/*app.post(/maps,(req,res) =>{
    const location = req.body.location;
    Map.create({
       locations :location
    }).then(result => res.json(result))
    .catch(err => res.json(err))
})*/

app.post('/add', (req, res) => {
    const { area, slot, des, company, city, rate } = req.body;
    
    details.create({ area, slot, des, company, city, rate })
      .then(result => res.json(result))
      .catch(err => res.json(err));
  });



  ///////////logins


  app.post('/login', async (req, res) => {
    const { email, pass } = req.body;
  
    try {
      const user = await Employee.findOne({ email: email });
      if (user) {
        const isMatch = await bcrypt.compare(pass, user.pass);
        if (isMatch) {
          res.json("success");
        } else {
          res.json("The password is incorrect");
        }
      } else {
        res.json("Invalid email");
      }
    } catch (err) {
      console.error(err);
      res.status(500).json("An error occurred. Please try again.");
    }
  });

  app.post('/register', async (req, res) => {
    const { name, email, pass } = req.body;
  
    if (!name || !email || !pass) {
      return res.json("Please fill in all fields.");
    }
  
    try {
      const hashedPass = await bcrypt.hash(pass, 10);
      await Employee.create({ name, email, pass: hashedPass });
      res.json("success");
    } catch (err) {
      console.error(err);
      res.status(500).json("Registration failed. Please try again.");
    }
  });




app.listen(3001, () => {
    console.log("Server is running on port 3001");
});
